
# coding: utf-8

# In[1]:

import json

with open('../data/results.json') as f: 
    data = json.load(f)


# In[2]:

genomesize = 6264404

tot_len = 0
for i in range(len(data['data'])):
    
    tot_len += data['data'][i]['attributes']['length']
    
gap_bet_contigs = (genomesize - tot_len) / len(data['data'])


##################################################################

for i in range(len(data['data'])):

    if 'confidence' in data['data'][i]['lanes'].keys():

        print "contig: %s" % data['data'][i]['attributes']['name']

        print data['data'][i]['attributes']['length']
        print len(data['data'][i]['lanes']['depth'])
        print len(data['data'][i]['lanes']['confidence'])

        print "\n"


###################################################################

# In[3]:

def parse_ref():
    
    parsed_reference = []
    ref = {}
    
    for num_contig in range(len(data['data'])):
        
        ref['id'] = num_contig
        ref['name'] = data['data'][num_contig]['attributes']['name']
        ref['strand'] = -1
        
        if num_contig == 0:
        
            ref['start'] = 0 
            ref['end'] = data['data'][num_contig]['attributes']['length']
            
        else:
            
            ref['start'] = ref['end'] + 1
            ref['end'] = ref['start'] + data['data'][num_contig]['attributes']['length']
            
        parsed_reference.append(ref.copy())
        ref['end'] += gap_bet_contigs 
        
    return parsed_reference
        
parsed_reference = parse_ref()


# In[4]:

def parse_lane(parsed_reference, lanetype, strand):
    
    parsed_lane = []
    track = {}
        
    for num_contig in range(len(data['data'])):
        
        contig_start_point = parsed_reference[num_contig]['start']
            
        try: #there might be no cs inside the contig

            for num_track in range(len(data['data'][num_contig]['lanes'][lanetype])):
                                    
                track['id'] = data['data'][num_contig-1]['attributes']['length'] + num_track #the id needs to be unique..
                track['name'] = num_track
                track['strand'] = strand
                track['start'] = contig_start_point + data['data'][num_contig]['lanes'][lanetype][num_track]['position'] 
                track['end'] = track['start'] + data['data'][num_contig]['lanes'][lanetype][num_track]['length']

                parsed_lane.append(track.copy())

        except KeyError:
            pass

    return parsed_lane

parsed_cs = parse_lane(parsed_reference, 'cs', strand = -2)
parsed_ucs = parse_lane(parsed_reference, 'ucs', strand = -3)


# In[5]:

lane_names = ['reference', 'cs', 'ucs']
lanes = [parsed_reference, parsed_cs, parsed_ucs]

contigs = []

for num_lane in range(len(lanes)):
        
    contig = {}

    contig['trackName'] = lane_names[num_lane]
    contig['trackType'] = 'stranded'
    contig['visible'] = True
    contig['inner_radius'] = 120
    contig['outer_radius'] = 160
    contig['trackFeatures'] = 'complex'
    contig['featureThreshold'] = 7000000
    contig['mouseclick'] = 'islandPopup'
    contig['mouseover_callback'] = 'islandPopup'
    contig['mouseout_callback'] = 'islandPopupClear'
    contig['linear_mouseclick'] = 'linearPopup'
    contig['showLabels'] = True
    contig['showTooltip'] = True
    contig['linear_mouseclick'] = 'linearClick'
    contig['items'] = []

    contig['items'] = lanes[num_lane]

    contigs.append(contig.copy())


depth = {}

depth['trackName'] = 'track4'
depth['trackType'] =  'plot'
depth['visible'] = 'true'
depth['plot_min'] = 0.4891
depth['plot_max'] = 0.7274
depth['plot_mean'] = 0.66558768401076
depth['bp_per_element'] = 10000
depth['plot_width'] = 75
depth['linear_plot_width'] = 100
depth['linear_plot_height'] = 285
depth['items'] = [0.6271,0.6505,0.6809,0.6823,0.6971,0.608,0.6569,0.6855,0.6987,0.7005,0.6847,0.672,0.6525,0.6726,0.6595,0.6722,0.6874,0.6891,0.6571,0.69,0.6798,0.6787,0.6701,0.6893,0.6923,0.675,0.6876,0.6837,0.657,0.6285,0.6911,0.6765,0.6637,0.6409,0.6623,0.6571,0.6623,0.6836,0.6887,0.6778,0.6667,0.6816,0.6756,0.666,0.6741,0.6804,0.6876,0.6527,0.6679,0.6728,0.6707,0.6741,0.6834,0.6711,0.6654,0.6407,0.6792,0.6875,0.6758,0.6722,0.68,0.6599,0.6538,0.6489,0.6489,0.6538,0.653,0.6498,0.6478,0.639,0.6189,0.6574,0.5658,0.6861,0.6817,0.6776,0.6653,0.6869,0.5688,0.6159,0.6745,0.6826,0.674,0.6433,0.6687,0.6766,0.6766,0.686,0.6749,0.6484,0.6397,0.6765,0.6506,0.6759,0.6621,0.6607,0.6786,0.6596,0.6702,0.6345,0.6596,0.6633,0.635,0.6369,0.6262,0.6238,0.5394,0.5977,0.6546,0.6383,0.6877,0.6583,0.6614,0.6783,0.6763,0.6687,0.6415,0.6622,0.6385,0.6755,0.6786,0.6623,0.6795,0.6896,0.5812,0.6631,0.668,0.674,0.6691,0.6668,0.6702,0.6843,0.6835,0.7062,0.6774,0.6727,0.6982,0.7156,0.7131,0.6945,0.6612,0.6763,0.6644,0.6629,0.6856,0.6564,0.6875,0.6689,0.5174,0.6622,0.5647,0.6357,0.6966,0.6834,0.677,0.6617,0.6854,0.6694,0.659,0.6761,0.6824,0.6763,0.6812,0.6366,0.6322,0.663,0.6524,0.6552,0.6619,0.6461,0.6781,0.6635,0.6299,0.648,0.6815,0.6614,0.6887,0.6722,0.6853,0.6804,0.6312,0.6687,0.6689,0.6718,0.6804,0.6535,0.6749,0.6697,0.6575,0.6427,0.6504,0.634,0.6523,0.6651,0.6445,0.6127,0.6446,0.663,0.6632,0.6589,0.6604,0.6705,0.6873,0.6749,0.6867,0.6749,0.6576,0.6877,0.6852,0.6867,0.6831,0.6473,0.6322,0.679,0.6689,0.6855,0.6902,0.6882,0.685,0.6887,0.6794,0.667,0.6226,0.659,0.6923,0.688,0.695,0.6673,0.6794,0.6869,0.7054,0.6175,0.6943,0.6876,0.6752,0.6868,0.6589,0.6945,0.7036,0.6647,0.6687,0.6717,0.6733,0.6786,0.5441,0.6301,0.6943,0.6814,0.6881,0.6897,0.6819,0.6889,0.6844,0.706,0.693,0.6747,0.6859,0.6924,0.6893,0.6973,0.686,0.6859,0.6614,0.6824,0.6663,0.6333,0.6609,0.6639,0.677,0.6963,0.6677,0.7077,0.6648,0.7085,0.6899,0.6475,0.6029,0.6649,0.6824,0.7044,0.6782,0.6846,0.6818,0.684,0.6791,0.6833,0.6784,0.6781,0.6756,0.663,0.6285,0.6259,0.6455,0.6601,0.6669,0.6565,0.6336,0.6545,0.6517,0.6589,0.6751,0.6549,0.6609,0.6833,0.6658,0.6671,0.6661,0.687,0.6612,0.5835,0.64,0.6455,0.6481,0.656,0.6682,0.6206,0.6617,0.6588,0.6619,0.6886,0.6518,0.6827,0.6951,0.6765,0.6854,0.6919,0.7068,0.6939,0.6928,0.6639,0.6969,0.6415,0.6525,0.6624,0.6646,0.6417,0.6553,0.6382,0.684,0.6657,0.6451,0.6635,0.6739,0.6729,0.691,0.6639,0.6751,0.6832,0.6663,0.669,0.6629,0.658,0.6103,0.4891,0.54,0.6586,0.6784,0.6636,0.6719,0.6743,0.6786,0.6647,0.6544,0.666,0.6574,0.6512,0.6938,0.642,0.6264,0.6614,0.6785,0.6831,0.667,0.6974,0.6865,0.6645,0.6683,0.6611,0.6905,0.663,0.6827,0.695,0.7113,0.6775,0.672,0.6666,0.6897,0.6859,0.6689,0.661,0.6515,0.6654,0.6937,0.6495,0.6608,0.6709,0.6547,0.6633,0.6997,0.7091,0.6726,0.6702,0.688,0.6654,0.6678,0.6465,0.6651,0.6535,0.6417,0.6465,0.6804,0.668,0.6921,0.6685,0.672,0.6683,0.6604,0.6696,0.6501,0.6487,0.6798,0.6887,0.6601,0.6958,0.6848,0.6515,0.6513,0.6373,0.6599,0.6111,0.6705,0.6783,0.6289,0.6466,0.6792,0.6793,0.69,0.6703,0.6861,0.6741,0.66,0.6797,0.6562,0.6831,0.6875,0.6799,0.6619,0.6657,0.6746,0.6869,0.683,0.6666,0.6757,0.6845,0.6774,0.672,0.655,0.6804,0.6905,0.6849,0.6724,0.6826,0.6594,0.6823,0.6956,0.7,0.6754,0.6728,0.6851,0.68,0.6897,0.6785,0.7062,0.7274,0.6908,0.6096,0.5816,0.6208,0.584,0.604,0.7012,0.6747,0.6671,0.6511,0.6553,0.6829,0.6761,0.6931,0.6813,0.6719,0.6608,0.648,0.6591,0.6509,0.6624,0.6564,0.6237,0.65,0.6491,0.6371,0.6673,0.6718,0.6789,0.644,0.6745,0.6461,0.6323,0.6408,0.6467,0.659,0.6368,0.6457,0.6642,0.6622,0.6665,0.6745,0.6635,0.6591,0.6444,0.668,0.6628,0.6636,0.6729,0.6589,0.6463,0.6608,0.5708,0.6337,0.6646,0.666,0.6576,0.663,0.6352,0.6256,0.6479,0.6601,0.6879,0.6896,0.6741,0.693,0.6898,0.6845,0.6733,0.676,0.6692,0.6765,0.687,0.6611,0.6988,0.689,0.6786,0.652,0.6805,0.6603,0.6437,0.6768,0.6745,0.6731,0.683,0.6892,0.6965,0.6473,0.6686,0.6641,0.6686,0.667,0.6677,0.6417,0.6528,0.6662,0.6662,0.6584,0.6307,0.679,0.676,0.6842,0.6633,0.6627,0.677,0.6791,0.6633,0.6607,0.6492,0.671,0.6556,0.6738,0.6819,0.6823,0.6681,0.6545,0.6497,0.6554,0.6411,0.6652,0.6715,0.6633,0.6645,0.6629,0.6667,0.6657,0.6591,0.6739,0.6872,0.6448,0.5838,0.6587,0.6973,0.6726,0.6766,0.6637,0.6758,0.6794,0.6792,0.6606,0.6627,0.6832,0.6666,0.6583,0.6503,0.6679,0.6768,0.6609,0.6553,0.6706,0.6447,0.6162,0.630790190735695]

#contigs.append(depth.copy())
    
## add another reference
#contig['trackName'] = 'contig'
#contig['inner_radius'] = 30
#contig['outer_radius'] = 480

#contig['items'] = parsed_reference

#contigs.append(contig.copy())


# In[6]:

# save to file:
with open('../data/contig.data.json', 'w') as f:
    json.dump(contigs, f, indent=3)


# In[ ]:



